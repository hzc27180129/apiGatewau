---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/12/24 13:43
---
local config_loader = require("apiGateway.utils.config_loader")
local utils = require("apiGateway.common.utils")
local json = require('apiGateway.utils.json')
local Main = {}

-- 派生类的方法 new
function Main:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

--根据配置文件初始化
function Main:init(options)
    options = options or {}
    local config
    local status, err = pcall(function()
        --rainbow的配置文件路径
        local conf_file_path = options.config
        config = config_loader:new(nil):load(conf_file_path)
        --加载配置的插件
        loaded_plugins = self:load_node_plugins(config)
    end)

    if not status or err then
        utils.error_log("Startup error: " .. err)
        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end
    utils.debug_log("===========init============");
end

function Main:load_node_plugins(config)
    utils.debug_log("===========load_node_plugins============");
    local plugins = config.plugins --插件列表
    local sorted_plugins = {} --按照优先级的插件集合
    for _, v in ipairs(plugins) do
        local loaded, plugin_handler = utils.load_module_if_exists("apiGateway.plugins." .. v .. ".handler")
        if not loaded then
            utils.warn_log("The following plugin is not installed or has no handler: " .. v)
        else
            utils.debug_log("Loading plugin: " .. v)
            table.insert(sorted_plugins, {
                name = v,
                handler = plugin_handler(), --插件
            })
        end
    end
    --表按照优先级排序
    table.sort(sorted_plugins, function(a, b)
        local priority_a = a.handler.PRIORITY or 0
        local priority_b = b.handler.PRIORITY or 0
        return priority_a > priority_b
    end)
    return sorted_plugins
end

function Main:init_worker()
    utils.debug_log("===========Main:init_worker============");
end

function Main:redirect()
    utils.debug_log("===========Main:redirect============");
end

function Main:rewrite()
    utils.debug_log("===========Main:rewrite============");
end

function Main:access()
    utils.debug_log("===========Main:access============");
    for _, plugin in ipairs(loaded_plugins) do
        plugin.handler:access()
    end
end

function Main:header_filter()
    utils.debug_log("===========Main:header_filter============");
end

function Main:body_filter()
    utils.debug_log("===========Main:body_filter============");
end

function Main:log()
    utils.debug_log("===========Main:log============");

    -- 定义json便于日志数据整理收集
    local log_json = {}
    log_json["uri"] = ngx.var.uri
    log_json["args"] = ngx.var.args
    log_json["host"] = ngx.var.host
    log_json["request_body"] = ngx.var.request_body
    log_json["remote_addr"] = ngx.var.remote_addr
    log_json["remote_user"] = ngx.var.remote_user
    log_json["time_local"] = ngx.var.time_local
    log_json["status"] = ngx.var.status
    log_json["body_bytes_sent"] = ngx.var.body_bytes_sent
    log_json["http_referer"] = ngx.var.http_referer
    log_json["http_user_agent"] = ngx.var.http_user_agent
    log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for
    log_json["upstream_response_time"] = ngx.var.upstream_response_time
    log_json["request_time"] = ngx.var.request_time
     --转换json为字符串
    local message = json.encode(log_json);
    utils.debug_log(message);

end

return Main;